Ext.data.JsonP.fields({"guide":"<h1 id='fields-section-fields'>Fields</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/fields-section-label'>Label</a></li>\n<li><a href='#!/guide/fields-section-type'>Type</a></li>\n<li><a href='#!/guide/fields-section-values'>Values</a></li>\n<li><a href='#!/guide/fields-section-events'>Events</a></li>\n<li><a href='#!/guide/fields-section-validate'>Validate</a></li>\n</ol>\n</div>\n\n<p>Fields extend <a href=\"#!/api/Widgets.nlFokkezbForm.controllers.field\" rel=\"Widgets.nlFokkezbForm.controllers.field\" class=\"docClass\">Widgets.nlFokkezbForm.controllers.field</a>, which takes care of the <code>Ti.UI.TableViewRow</code> and default value and validation methods. A field adds his input control and can override the methods.</p>\n\n<h2 id='fields-section-label'>Label</h2>\n\n<p>Set any the <code>Ti.UI.Label</code>'s properties via field's <code>label</code> or <code>labelid</code> property. The <code>label</code> property can also be a set of properties to apply:</p>\n\n<pre><code>{\n    fieldsets: [{\n        fields: [{\n            name: 'name',\n            label: 'Your name',\n            type: 'text'\n        },{\n            name: 'email',\n            labelid: 'form_email',\n            type: 'text',\n            format: 'email'\n        }, {\n            name: 'city',\n            label: {\n                text: 'Your city',\n                color: 'red'\n            },\n            type: 'text'\n        }]\n    }]\n}\n</code></pre>\n\n<h2 id='fields-section-type'>Type</h2>\n\n<p>There are different options for determining the input type or even provide a custom <code>Ti.UI.TableViewRow</code>:</p>\n\n<h3 id='fields-section-built-in-types'>Built-in types</h3>\n\n<p>Use the <code>type</code> property to specify one of the widget's controllers to use:</p>\n\n<pre><code>fields: [{\n    name: 'name',\n    label: 'Your name',\n    type: 'text'\n}]\n\n// equals: Alloy.createWidget('nl.fokkezb.form', 'text');\n</code></pre>\n\n<h3 id='fields-section-custom-type-by-a-widget'>Custom type by a widget</h3>\n\n<p>Use the <code>widget</code> property to load the controller set by <code>type</code> form a different widget:</p>\n\n<pre><code>fields: [{\n    name: 'name',\n    label: 'Your name',\n    widget: 'my.form',\n    type: 'text'\n}]\n\n// equals: Alloy.createWidget('my.form', 'text');\n</code></pre>\n\n<h3 id='fields-section-custom-type-by-a-controller'>Custom type by a controller</h3>\n\n<p>Use the <code>controller</code> property to load an app controller:</p>\n\n<pre><code>fields: [{\n    name: 'name',\n    label: 'Your name',\n    controller: 'fields/myField'\n}]\n\n// equals: Alloy.createController('fields/myField');\n</code></pre>\n\n<h3 id='fields-section-custom-row'>Custom row</h3>\n\n<p>Or even insert a custom <code>Ti.UI.TableViewRow</code>:</p>\n\n<pre><code>fields: [{\n    name: 'name',\n    label: 'Your name',\n    type: 'text'\n}, Ti.UI.createTableView({\n    title: 'Some row in between fields!'\n}), {\n    name: 'email',\n    labelid: 'form_email',\n    type: 'text',\n    format: 'email'\n}]\n</code></pre>\n\n<h2 id='fields-section-values'>Values</h2>\n\n<p>See <a href=\"#!/guide/forms-section-values\">Forms</a> for how to set and get values, also on a individual field.</p>\n\n<h2 id='fields-section-events'>Events</h2>\n\n<p>The field fires a <code>change</code> and <code>change:[field]</code> event whenever the value changes.</p>\n\n<p>You can add a listener via the <code>listener</code> property:</p>\n\n<pre><code>{\n    fields: [{\n        name: 'name',\n        label: 'Your name',\n        type: 'text',\n        listener: function(e) {\n            e.form.getField('email').required = (e.value === 'Jeff');\n        }\n    }, {\n        email: 'email',\n        label: 'Your email',\n        type: 'text',\n        format: 'email'\n    }]\n}\n</code></pre>\n\n<p>Or using the BackBoneJS <code>on</code> method of the form:</p>\n\n<pre><code>form.getField('name').on('change', myListener);\n</code></pre>\n\n<p><strong>NOTE</strong>: Using the last method you don't have <code>e.form</code> and <code>e.field</code>.</p>\n\n<h2 id='fields-section-validate'>Validate</h2>\n\n<p>See <a href=\"#!/guide/forms-section-validate\">Forms</a> for how to set and get values, also on a individual field.</p>\n\n<h3 id='fields-section-required'>Required</h3>\n\n<p>Unless a type overrides the default behavior, you can make a field required using the <code>required</code> property:</p>\n\n<pre><code>fields: [{\n    name: 'name',\n    label: 'Your name',\n    type: 'text',\n    required: true\n}]\n</code></pre>\n\n<h3 id='fields-section-validator'>Validator</h3>\n\n<p>You can provide a function to perform validation (if <code>required</code> didn't fail) via the <code>validator</code> property:</p>\n\n<pre><code>fields: [{\n    name: 'creditcard',\n    label: 'Credit Card',\n    type: 'text',\n    validator: function(value) {\n        return form.validator.isEmail(value) &amp;&amp; !value.indexOf('hotmail.com');\n    }\n}]\n</code></pre>\n\n<p>You can use the NPM <a href=\"#!/api/Widgets.nlFokkezbForm.lib.validator\" rel=\"Widgets.nlFokkezbForm.lib.validator\" class=\"docClass\">Widgets.nlFokkezbForm.lib.validator</a> library exposed via <a href=\"#!/api/Widgets.nlFokkezbForm.controllers.widget-property-validator\" rel=\"Widgets.nlFokkezbForm.controllers.widget-property-validator\" class=\"docClass\">Widgets.nlFokkezbForm.controllers.widget.validator</a> or any custom validation as long as it returns a <code>Boolean</code>.</p>\n\n<h3 id='fields-section-override-style'>Override style</h3>\n\n<p>The <code>Ti.UI.TableViewSection</code> is created using a <code>.section</code> class, unless you have set it to something else. As of Alloy 1.4.0 you can use this class to <a href=\"https://jira.appcelerator.org/browse/ALOY-378\">override the style using a theme</a> for the widget's <code>widget.tss</code> file.</p>\n","title":"Fields"});