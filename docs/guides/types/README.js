Ext.data.JsonP.types({"guide":"<h1 id='types-section-types'>Types</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/types-section-using-types'>Using types</a></li>\n<li><a href='#!/guide/types-section-adding-types'>Adding types</a></li>\n</ol>\n</div>\n\n<p>At the moment the widget comes with these built-in types:</p>\n\n<ul>\n<li><a href=\"#!/api/Widgets.nlFokkezbForm.controllers.text\" rel=\"Widgets.nlFokkezbForm.controllers.text\" class=\"docClass\">text</a></li>\n<li><a href=\"#!/api/Widgets.nlFokkezbForm.controllers.textarea\" rel=\"Widgets.nlFokkezbForm.controllers.textarea\" class=\"docClass\">textarea</a></li>\n<li><a href=\"#!/api/Widgets.nlFokkezbForm.controllers.switch\" rel=\"Widgets.nlFokkezbForm.controllers.switch\" class=\"docClass\">switch</a></li>\n</ul>\n\n\n<h2 id='types-section-using-types'>Using types</h2>\n\n<p>See <a href=\"#!/guide/fields-section-type\">Fields</a> to learn how to use a built-in or custom type.</p>\n\n<h2 id='types-section-adding-types'>Adding types</h2>\n\n<p>By leaving most of the common views and logic in <a href=\"#!/api/Widgets.nlFokkezbForm.controllers.field\" rel=\"Widgets.nlFokkezbForm.controllers.field\" class=\"docClass\">Widgets.nlFokkezbForm.controllers.field</a> a new type's controller can be as simple as:</p>\n\n<pre><code>exports.baseController = '../widgets/nl.fokkezb.form/controllers/field';\n\n(function constructor(args) {\n\n  // input properties to apply\n  if (args.input) {\n    $.input.applyProperties(args.input);\n  }\n\n  $.setInput($.input);\n\n})(arguments[0]);\n</code></pre>\n\n<p>And a view not much more then:</p>\n\n<pre><code>&lt;Alloy&gt;\n  &lt;Slider id=\"input\" /&gt;\n&lt;/Alloy&gt;\n</code></pre>\n\n<h3 id='types-section-basecontroller'>baseController</h3>\n\n<p>The strange <code>baseController</code> path is a workaround for <a href=\"https://jira.appcelerator.org/browse/TC-4280\">TC-4280</a> to cope with Alloy prepending <code>alloy/controllers/</code>.</p>\n\n<h3 id='types-section-applyproperties'>applyProperties</h3>\n\n<p>Please conform to how the built-ins work by allowing the user to apply properties to your type's (main) input view using the <code>input</code> property.</p>\n\n<h3 id='types-section-setinput'>setInput</h3>\n\n<p>You need to call <a href=\"#!/api/Widgets.nlFokkezbForm.controllers.field-method-setInput\" rel=\"Widgets.nlFokkezbForm.controllers.field-method-setInput\" class=\"docClass\">Widgets.nlFokkezbForm.controllers.field.setInput</a> to add your type's input view to the row.</p>\n\n<h3 id='types-section-overloading-controller-methods'>Overloading controller methods</h3>\n\n<p>You can overload any of <a href=\"#!/api/Widgets.nlFokkezbForm.controllers.field\" rel=\"Widgets.nlFokkezbForm.controllers.field\" class=\"docClass\">Widgets.nlFokkezbForm.controllers.field</a>'s methods:</p>\n\n<pre><code>/**\n * A switch is always valid.\n *\n * @return {Boolean} Always `true`.\n */\n$.isValid = function isValid() {\n  return true;\n}\n</code></pre>\n\n<h3 id='types-section-overloading-views'>Overloading views</h3>\n\n<p>You can maninpulate any of <a href=\"#!/api/Widgets.nlFokkezbForm.controllers.field\" rel=\"Widgets.nlFokkezbForm.controllers.field\" class=\"docClass\">Widgets.nlFokkezbForm.controllers.field</a>'s <a href=\"https://github.com/FokkeZB/nl.fokkezb.form/blob/master/views/field.xml\">view elements</a> using the <code>$.row</code>, <code>$.label</code> and <code>$.control</code> references. You could even remove the label and control, but not the row since that will already be added to the table.</p>\n\n<pre><code>(function constructor(args) {\n\n  // align our label to the top\n  $.label.top = 10;\n\n  // input properties to apply\n  if (args.input) {\n    $.input.applyProperties(args.input);\n  }\n\n  // add the input to the row\n  $.setInput($.input);\n\n})(arguments[0]);\n</code></pre>\n","title":"Types"});