Ext.data.JsonP.forms({"guide":"<h1 id='forms-section-forms'>Forms</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/forms-section-create'>Create</a></li>\n<li><a href='#!/guide/forms-section-values'>Values</a></li>\n<li><a href='#!/guide/forms-section-events'>Events</a></li>\n<li><a href='#!/guide/forms-section-validate'>Validate</a></li>\n<li><a href='#!/guide/forms-section-vertical-align-labels-and-input'>Vertical align labels and input</a></li>\n<li><a href='#!/guide/forms-section-customize'>Customize</a></li>\n</ol>\n</div>\n\n<p>The form is a <code>Ti.UI.TableView</code> holding a <code>Ti.UI.TableViewSection</code> for each fieldset and a <code>Ti.UI.TableViewRow</code> for each field.</p>\n\n<h2 id='forms-section-create'>Create</h2>\n\n<p>See <a href=\"#!/guide/getting_started\">Getting Started</a> to learn how to create a form.</p>\n\n<h2 id='forms-section-values'>Values</h2>\n\n<p>You can pass initial values when you <a href=\"#!/guide/getting_started-section-2.-initializing-the-widget\">initialize</a> the widget using the <code>values</code> property on the field and/or form level. The latter will overwrite the first, so you can use the field values as defaults.</p>\n\n<pre><code>var form = Alloy.createWidget('nl.fokkezb.nl', {\n    fieldsets: [{\n        legend: 'My form',          \n        fields: [{\n            name: 'name',\n            label: 'Your name',\n            type: 'text',\n            value: 'John'\n        }]\n    }],\n    values: {\n        name: 'Jeff'\n    }\n});\n</code></pre>\n\n<p>After init you can set them like this:</p>\n\n<pre><code>form.setValues({\n    name: 'Jeff'\n});\n\nvar values = form.getValues();\n\nconsole.debug(values.name); // will show 'Jeff';\n</code></pre>\n\n<p>To set or get the value of an individual field:</p>\n\n<pre><code>var fieldCtrl = form.getField('name');\n\nfieldCtrl.setValue('Jeff');\n\nvar value = fieldCtrl.getValue();\n\nconsole.debug(value); // will show 'Jeff';\n</code></pre>\n\n<h3 id='forms-section-filters'>Filters</h3>\n\n<p>You can set a filter to run the values through before returning them with <code>getValues()</code>:</p>\n\n<pre><code>{\n    filter: function(values) {\n        if (values.name === 'Jeff') {\n            values.name = 'Haynie';\n        }\n    }\n    fields: [{\n        name: 'name',\n        label: 'Your name',\n        type: 'text'\n    }]\n}   \n</code></pre>\n\n<h2 id='forms-section-events'>Events</h2>\n\n<p>The form fires a <code>change</code> and <code>change:[field]</code> event whenever a field's value changes.</p>\n\n<p>You can add a listener via the <code>listener</code> property:</p>\n\n<pre><code>{\n    listener: function(e) {\n        if (e.field === 'name') {\n            e.form.getField('email').required = (e.value === 'Jeff');\n        }\n    }\n    fields: [{\n        name: 'name',\n        label: 'Your name',\n        type: 'text'\n    }, {\n        email: 'email',\n        label: 'Your email',\n        type: 'text',\n        format: 'email'\n    }]\n}\n</code></pre>\n\n<p>Or using the BackBoneJS <code>on</code> method of the form:</p>\n\n<pre><code>form.on('change', myListener);\n</code></pre>\n\n<h2 id='forms-section-validate'>Validate</h2>\n\n<p>You can validate all fields by calling <a href=\"#!/api/Widgets.nlFokkezbForm.controllers.widget-method-isValid\" rel=\"Widgets.nlFokkezbForm.controllers.widget-method-isValid\" class=\"docClass\">Widgets.nlFokkezbForm.controllers.widget.isValid</a>. This will call <a href=\"#!/api/Widgets.nlFokkezbForm.controllers.field-method-isValid\" rel=\"Widgets.nlFokkezbForm.controllers.field-method-isValid\" class=\"docClass\">Widgets.nlFokkezbForm.controllers.field.isValid</a> on all fields and return either <code>true</code> or <code>false</code>. The rows of invalid fields will get a reddish <code>backgroundColor</code>.</p>\n\n<pre><code>if (form.isValid() === false) {\n    alert('Correct the red fields please!');\n}\n</code></pre>\n\n<p>To validate an individual field:</p>\n\n<pre><code>var fieldCtrl = form.getField('name');\n\nif (fieldCtrl.isValid() === false) {\n    alert('Your name please!');\n}\n</code></pre>\n\n<h2 id='forms-section-vertical-align-labels-and-input'>Vertical align labels and input</h2>\n\n<p>Since 1.1.1 you can vertical align a single field, fieldset or the full form via the <code>row</code> property that can exist at any of these 3 levels:</p>\n\n<pre><code>{\n    row: {\n        layout: 'vertical'\n    },\n    fieldsets: [{\n        row: {\n            layout: 'horizontal'\n        },\n        fields: [{\n            name: 'name',\n            row: {\n                layout: 'vertical'\n            }\n        }]\n    }]\n}\n</code></pre>\n\n<h2 id='forms-section-customize'>Customize</h2>\n\n<p>You can customize the <code>Ti.UI.TableView</code> in 2 ways:</p>\n\n<h3 id='forms-section-apply-properties'>Apply properties</h3>\n\n<p>Set any <code>Ti.UI.TableView</code> properties via the <code>table</code> property in either JS or TSS:</p>\n\n<pre><code>{\n    table: {\n        top: 100,\n        headerView: Ti.UI.createView( .. ),\n        footerTitle: 'Some text after all fieldsets'\n    },\n    fieldsets: [{\n        fields: [{\n            name: 'name',\n            label: 'Your name',\n            type: 'text'\n        }]\n    }]\n}\n</code></pre>\n\n<h3 id='forms-section-override-style'>Override style</h3>\n\n<p>The <code>Ti.UI.TableView</code> is created using a <code>.table</code> class. As of Alloy 1.4.0 you can use this class to <a href=\"https://jira.appcelerator.org/browse/ALOY-378\">override the style using a theme</a> for the widget's <code>widget.tss</code> file.</p>\n","title":"Forms"});